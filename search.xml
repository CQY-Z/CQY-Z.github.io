<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unbuntu中的TIM中文显示问题</title>
      <link href="/2020/02/15/Ubuntu%E4%B8%AD%E7%9A%84TIM%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/15/Ubuntu%E4%B8%AD%E7%9A%84TIM%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<hr><pre><code>前段时间安装完了Ubuntu，想着给Ubuntu上下个TIM方便通信（用的是deepin-wine）。但是在网上找了下载步骤下好之后，中文字体无法正常显示（但是登录之后别人发的信息是可以看清楚的），让我很难受，找了资料发现是少了字体（中文以乱码形式出现大部分情况下就是缺少字体，我也不是很清楚），如下图：</code></pre><p>  <a href="/.io//../themes/Butterfly/source/img/tim.png" data-fancybox="group" data-caption=" " class="fancybox"><img alt=" " data-src="/.io//../themes/Butterfly/source/img/tim.png" class="lazyload" title=" "></a>  </p><ul><li>本人解决方案比较简单粗暴，因为看网上的大部分都是虚拟机（博主的是双系统Ubuntu+win10）  </li></ul><hr><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h1><ul><li>第一步:启动WIN10系统并准备一个移动盘（U盘或者移动硬盘），找到存放字体的路径（C:\Windows\Fonts）  </li><li>第二步:将里面带有.ttf和.ttc的字体复制到移动盘当中（只留中文字体也行）  </li><li>第三步:启动Ubuntu，将字体移植到TIM使用字体的路径（.deepinwine\Deepin-TIM\drive_c\windows\Fonts）<br>之后重启TIM，就正常显示中文了  </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unbuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unbuntu遇到的问题</title>
      <link href="/2020/02/09/Ubuntu%E5%AE%89%E8%A3%85%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/02/09/Ubuntu%E5%AE%89%E8%A3%85%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="安装时遇到的问题"><a href="#安装时遇到的问题" class="headerlink" title="安装时遇到的问题"></a>安装时遇到的问题</h1><hr><h2 id="打开grub文件"><a href="#打开grub文件" class="headerlink" title="打开grub文件"></a>打开grub文件</h2><pre><code>sudo gedit /etc/default/grub打开一个文件  </code></pre><h2 id="进入后把："><a href="#进入后把：" class="headerlink" title="进入后把："></a>进入后把：</h2><pre><code>GRUB_CMDLINE_LINUX_DEFAULT= &quot;quiet splash&quot;  GRUB_CMDLINE_LINUX=&quot;&quot;  </code></pre><h2 id="分别改成："><a href="#分别改成：" class="headerlink" title="分别改成："></a>分别改成：</h2><pre><code>GRUB_CMDLINE_LINUX_DEFAULT= &quot;quiet splash nomodeset&quot;  GRUB_CMDLINE_LINUX= &quot;apm power_off=1&quot;  </code></pre><h2 id="然后更新一下文件："><a href="#然后更新一下文件：" class="headerlink" title="然后更新一下文件："></a>然后更新一下文件：</h2><pre><code>sudo update-grub  </code></pre><blockquote><p>可能可解决的问题：开机卡死、关机卡死、开机后自动关机  </p></blockquote><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Unbuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git指令内容</title>
      <link href="/2020/02/09/Git%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/02/09/Git%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Git中四个区域"><a href="#Git中四个区域" class="headerlink" title="Git中四个区域:"></a>Git中四个区域:</h1><hr><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Workspace：工作区  </span><br><span class="line">Stage：暂存区  </span><br><span class="line">Repository：仓库区（或本地仓库）  </span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure></div><hr><h1 id="Git操作指令："><a href="#Git操作指令：" class="headerlink" title="Git操作指令："></a>Git操作指令：</h1><hr><h2 id="1-常用指令"><a href="#1-常用指令" class="headerlink" title="1. 常用指令"></a>1. 常用指令</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">routeros</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-从对应的远程仓库中克隆内容:  $ git clone [url]  </span><br><span class="line">-查看当前本地仓库中的文件状态:  <span class="variable">$git</span> status  </span><br><span class="line">-查看当前远程仓库地址:  $ git remote -v  </span><br><span class="line">-添加远程仓库,与远程仓库连接:  $ git remote <span class="builtin-name">add</span> [name] [url]  </span><br><span class="line">-将本地仓库内容推送到远程仓库:  $ git push [remoteName] [localBranchName][^RUNOOB1]  </span><br><span class="line">-添加说明:  <span class="variable">$git</span> commit -m <span class="string">"*Explanation*"</span>_  </span><br><span class="line">-拉取远程仓库信息:  $ git pull [remoteName] [localBranchName]  </span><br><span class="line">-解除与远程仓库的连接:  $ git remote rm [name]  </span><br><span class="line">-暂存改变或新建的内容:  $ git <span class="builtin-name">add</span> [name][^RUNOOB2]  </span><br><span class="line">-创键分支:  <span class="variable">$git</span> branch [name][^RUNOOB3]  </span><br><span class="line">-查看所有分支:  <span class="variable">$git</span> branch -a  </span><br><span class="line">-查看远程仓库内所有分支:  <span class="variable">$git</span> branch -r  </span><br><span class="line">-查看本地仓库分支:  <span class="variable">$git</span> branch  </span><br><span class="line">-切换分支:  <span class="variable">$git</span> checkout [name]  </span><br><span class="line">-合并分支:  <span class="variable">$git</span> merge [name]  </span><br><span class="line">-查看版本号:  <span class="variable">$git</span> log  </span><br><span class="line">-退回到目标版本号:  <span class="variable">$git</span> reset --hard 目标版本号  </span><br><span class="line">-显示当前的GIT配置:  <span class="variable">$git</span><span class="built_in"> config </span>--list [^RUNOOB4]  </span><br><span class="line">-设置用户名:  <span class="variable">$git</span><span class="built_in"> config </span>--global user.name[username]  </span><br><span class="line">-设置邮箱地址:  <span class="variable">$git</span><span class="built_in"> config </span>--global user.email[email]</span><br></pre></td></tr></table></figure></div><h2 id="2-在本地创建SSH公钥"><a href="#2-在本地创建SSH公钥" class="headerlink" title="2. 在本地创建SSH公钥"></a>2. 在本地创建SSH公钥</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">haml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">生成SHH <span class="symbol">KEY:</span>  $ ssh-keygen -t rsa -C <span class="string">"xxxxxxxxx@pp.com"</span>  </span></span><br><span class="line"><span class="ruby">-验证算否成功:  $ ssh -T git@github.com</span></span><br></pre></td></tr></table></figure></div><h2 id="3-细致操作指令"><a href="#3-细致操作指令" class="headerlink" title="3. 细致操作指令"></a>3. 细致操作指令</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">haml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   -<span class="ruby">删除工作区文件并放进暂存区:  $git rm [filename]  </span></span><br><span class="line"><span class="ruby">   -将文件从暂存区撤销:  $git reset HEAD --[filename]  </span></span><br><span class="line"><span class="ruby">   -撤销工作区的文件修改:  $git checkout --[filename]  </span></span><br><span class="line"><span class="ruby">   -停止追踪文件,但此文件会保留在工作区中[^RUNOOB3]:  $git rm --cached[filename]  </span></span><br><span class="line"><span class="ruby">   -配置Git显示颜色:  $git config --global color.ui <span class="literal">true</span>  </span></span><br><span class="line"><span class="ruby">   -创键远程的分支到本地:  $git checkout -b [branch][remote]/[branch]  </span></span><br><span class="line"><span class="ruby">   -比较工作区文件与暂存区文件的差异:  $git diff [filename]  </span></span><br><span class="line"><span class="ruby">   -比较暂存区的文件与上一次commit的差异:  $git diff --cached [filename]  </span></span><br><span class="line"><span class="ruby">   -比较工作区的文件与当前分支最新commit之间的差异<span class="symbol">:</span>$git diff HEAD -- [filename]  </span></span><br><span class="line"><span class="ruby">   -未使用git add添加到暂存区中的文件也一起提交:  $git commit -a -m <span class="string">"*Explanation*"</span>  </span></span><br><span class="line"><span class="ruby">   -查看commit历史:  $git log --stat  </span></span><br><span class="line"><span class="ruby">   -查看从最近到最远的提交日志简单日志:  $git log --pretty=oneline  </span></span><br><span class="line"><span class="ruby">   -查看最近n次的提交信息:  $git log -n  </span></span><br><span class="line"><span class="ruby">   -查看分支合并图:  $git log --graph  </span></span><br><span class="line"><span class="ruby">   -查看分支合并图与简单日志:  $git log --graph --pretty=online  </span></span><br><span class="line"><span class="ruby">   -查看命令历史:  $git reflog  </span></span><br><span class="line"><span class="ruby">   -查看指定文件是什么人在什么时间修改过:  $git blame [filename]  </span></span><br><span class="line"><span class="ruby">   -查看所有提交过的用户:  $git shortlog -sn  </span></span><br><span class="line"><span class="ruby">   -合并指定分支[branch]到当前分支[message]:  $git merge --no-ff -m[message][branch]  </span></span><br><span class="line"><span class="ruby">   -查看使用储藏起来的工作现场:  $git stash list  </span></span><br><span class="line"><span class="ruby">   -恢复工作现场:  $git stash apply  </span></span><br><span class="line"><span class="ruby">   -删除stash内容:  $git stash drop  </span></span><br><span class="line"><span class="ruby">   -恢复工作现场并删除stash内容:  $git stash pop  </span></span><br><span class="line"><span class="ruby">   -为当前HEAD打标签:  $git tag [tagname]  </span></span><br><span class="line"><span class="ruby">   -为本地tag添加说明:  $git tag [tagname] commitld 或者 $git tag -a[tagname] -m[message]commitld  </span></span><br><span class="line"><span class="ruby">-查看所有标签:  $git tag  </span></span><br><span class="line"><span class="ruby">-查看某个tag信息:  $git show [tagname]  </span></span><br><span class="line"><span class="ruby">-删除本地标签:  $git tag -d[tagname]  </span></span><br><span class="line"><span class="ruby">-删除远程标签:  $git tag -d[tagname] -&gt; git push [remote]<span class="symbol">:refs/tags/</span>[tagname]  </span></span><br><span class="line"><span class="ruby">-新建一个分支并且指向某个<span class="symbol">tag:</span>  $git checkout -b[branch][tagname]  </span></span><br><span class="line"><span class="ruby">-从远程的origin仓库的master分支下载代码到本地的origin <span class="symbol">master:</span>  $git fetch origin master  </span></span><br><span class="line"><span class="ruby">-从远程的origin仓库的master分支下载道本地并新建一个分支<span class="symbol">temp:</span>  $git fech origin <span class="symbol">master:</span>temp  </span></span><br><span class="line"><span class="ruby">-比较本地的仓库和远程仓库的区别:  $git log -p master..origin/master</span></span><br><span class="line"><span class="ruby">   -一个项目传到多个远程仓库（假设已经存在一个名为origin的远程仓库了）:  $ git remote set-url --push[name][newUrl]</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">routeros</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[^RUNOOB1]: *当本地仓库版本比远程仓库的要旧时，使用指令* _<span class="variable">$git</span> push -f_  </span><br><span class="line">[^RUNOOB2]: _<span class="variable">$git</span> <span class="builtin-name">add</span> ._ *和* _<span class="variable">$git</span> <span class="builtin-name">add</span> all_ *是暂存所有有变动包括新建的文件*  _<span class="variable">$git</span> <span class="builtin-name">add</span> -u_ *表示添加编辑和删掉的文件，不包括新添加的文件*  </span><br><span class="line">[^RUNOOB3]: *untracked状态*  </span><br><span class="line">[^RUNOOB4]: &gt; *查看用户名*:_<span class="variable">$git</span><span class="built_in"> config </span>user.name  </span><br><span class="line">            &gt; *查看邮箱地址*:_<span class="variable">$git</span><span class="built_in"> config </span>user.email_</span><br></pre></td></tr></table></figure></div><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
